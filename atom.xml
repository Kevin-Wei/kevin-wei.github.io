<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin This Wei]]></title>
  <link href="http://Kevin-Wei.github.io/atom.xml" rel="self"/>
  <link href="http://Kevin-Wei.github.io/"/>
  <updated>2013-06-16T21:05:41-07:00</updated>
  <id>http://Kevin-Wei.github.io/</id>
  <author>
    <name><![CDATA[Kevin Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CRUDy REST]]></title>
    <link href="http://Kevin-Wei.github.io/blog/2013/06/02/crudy-rest/"/>
    <updated>2013-06-02T21:30:00-07:00</updated>
    <id>http://Kevin-Wei.github.io/blog/2013/06/02/crudy-rest</id>
    <content type="html"><![CDATA[<h3>CRUDy RESTful Rails Resources</h3>

<h4>Quickly CRUDy</h4>

<p>This is a peak into what I&rsquo;ve learned so far in my Ruby on Rails bootcamp at <a href="https://www.codefellows.org/">Codefellows</a>.</p>

<p>So let me give you a quick overview on CRUD (Create, Read, Update, Delete).</p>

<p>These are the four basic operations you can do to data in a database.</p>

<p>Yup that was it. That was my overview. I hope those 4 words make sense.</p>

<h4>Restful Rails Resources basics</h4>

<p>What does it have to do with the RESTful MVC on rails? MVC, in case you need a refresher, is just a simple paradigm for organizing the structure of an application. Model should interact with data, and View should format and display it. The Controller is all the logic for <strong>what</strong> data should get fetched to <strong>which</strong> view and <strong>how</strong> it is sent.
HTTP verbs correspond to the CRUD actions, and the MVC in Rails maps them to certain URLs (paths) using an &ldquo;action&rdquo;. That&rsquo;s all it takes to make something RESTful.</p>

<p>Unfortunately, if you ever actually used a website you probably had to fill out a form before information could be saved to the site. These &ldquo;staging areas&rdquo; are nessessary so you can state what you&rsquo;re changing your data to before the CRUD action saves data to the database. So with our slight update to CRUD we get what I call CRUDy RESTful Rails Resources.</p>

<table>
<thead>
<tr>
<th align="left">CRUD</th>
<th align="center">Http Verb</th>
<th align="left">Action</th>
<th align="left">Path</th>
<th align="left">Use case</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Pre-create </td>
<td align="center"> Get </td>
<td align="left"> new </td>
<td align="left"> /resources/new </td>
<td align="left"> staging area to make our new data object</td>
</tr>
<tr>
<td align="left">Create </td>
<td align="center"> Post </td>
<td align="left"> create </td>
<td align="left"> /resources </td>
<td align="left"> The actual making of it</td>
</tr>
<tr>
<td align="left">Read </td>
<td align="center"> Get </td>
<td align="left"> show </td>
<td align="left"> /resources/:id </td>
<td align="left"> Show the thing</td>
</tr>
<tr>
<td align="left">Read-all </td>
<td align="center"> Get </td>
<td align="left"> index </td>
<td align="left"> /resources/ </td>
<td align="left"> Show ALL THE THINGS</td>
</tr>
<tr>
<td align="left">Pre-update </td>
<td align="center"> Get </td>
<td align="left"> edit </td>
<td align="left"> /resources/:id/edit </td>
<td align="left"> staging for change our thing</td>
</tr>
<tr>
<td align="left">Update </td>
<td align="center"> Put </td>
<td align="left"> update </td>
<td align="left"> /resources/:id </td>
<td align="left"> The actual updating of the thing</td>
</tr>
<tr>
<td align="left">Delete </td>
<td align="center"> Delete </td>
<td align="left"> destroy </td>
<td align="left"> /resources/:id </td>
<td align="left"> Remove the thing</td>
</tr>
</tbody>
</table>


<p>So to make all this CRUD happen all you have to do is add a line to the routes.rb file in your Rails application:</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">things</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Some quick CRUDy RESTful tricks</h4>

<p>But say you don&rsquo;t want to show ALL THE THINGS because there is only one of said thing. You can avoid the index option like this:</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resource</span><span class="p">:</span> <span class="n">thing</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even nest a resource. This is useful when you have models with has_many and belongs_to relationships. For example, a product has many attributes, and an attribute belongs to a product.</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">product</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="n">attribute</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates paths that are similarly nested as expected:</p>

<table>
<thead>
<tr>
<th align="left">Action</th>
<th align="left">Path</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">new </td>
<td align="left">/products/:products_id/attributes/new</td>
</tr>
<tr>
<td align="left">create </td>
<td align="left"> /products/:products_id/attributes</td>
</tr>
<tr>
<td align="left">show </td>
<td align="left"> /products/:products_id/attributes/:id</td>
</tr>
<tr>
<td align="left">index </td>
<td align="left">/products/:product_id/attributes</td>
</tr>
<tr>
<td align="left">edit </td>
<td align="left"> /products/:products_id/attributes/:id/edit</td>
</tr>
<tr>
<td align="left">update </td>
<td align="left"> /products/:products_id/attributes/:id</td>
</tr>
<tr>
<td align="left">destroy </td>
<td align="left"> /products/:products_id/attributes/:id</td>
</tr>
</tbody>
</table>


<p>Great, but what if you don&rsquo;t want some of these things to be possible? It&rsquo;s easy to handpick using the rails :only and :except options. You can include / exclude whatever you want.</p>

<h4>Custom CRUDyness</h4>

<p>Only want the index?</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">things</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:index</span>
</span></code></pre></td></tr></table></div></figure>


<p>Want things to be unchangeable (immutable)?</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">things</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Think the default word choice is awful and don&rsquo;t fit with your application? Yeah I agree. You can rename them like so:</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">zerg</span> <span class="ss">:path_names</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:new</span> <span class="o">=&gt;</span> <span class="s1">&#39;spawn&#39;</span><span class="p">,</span> <span class="ss">:edit</span> <span class="o">=&gt;</span> <span class="s1">&#39;evolve&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty basic stuff. Feel free to fall asleep reading more about it <a href="http://guides.rubyonrails.org/routing.html#overriding-the-named-helpers">here</a>.</p>

<p><a href="http://kevinthiswei.com/blog/2013/05/30/introduction/">So I lied in my Intro.</a> This post was probably boring and humorless. I&rsquo;m sorry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction: First Post Nonsense]]></title>
    <link href="http://Kevin-Wei.github.io/blog/2013/05/30/introduction/"/>
    <updated>2013-05-30T23:36:00-07:00</updated>
    <id>http://Kevin-Wei.github.io/blog/2013/05/30/introduction</id>
    <content type="html"><![CDATA[<h3>This Blog will soon be filled with:</h3>

<h4>Primarily:</h4>

<ul>
<li>Being a full stack Ruby on Rails Developer</li>
<li>Views on Tech News</li>
<li>Projects I am working on</li>
</ul>


<h4>Occasionally:</h4>

<ul>
<li>Beer thoughts</li>
<li>Esports thoughts</li>
<li>Fitness thoughts</li>
</ul>


<h4>and Mayhaps:</h4>

<ul>
<li>Being a terrible human, or what other people call an audiophile</li>
<li>Incomprehensible rants about things I canâ€™t stand</li>
<li>Comprehensible rants about anything really</li>
</ul>


<p>Hopefully, future posts will be less humourless and boring.</p>
]]></content>
  </entry>
  
</feed>
