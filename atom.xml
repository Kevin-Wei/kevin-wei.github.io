<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin This Wei]]></title>
  <link href="http://Kevin-Wei.github.io/atom.xml" rel="self"/>
  <link href="http://Kevin-Wei.github.io/"/>
  <updated>2013-06-21T01:54:51-07:00</updated>
  <id>http://Kevin-Wei.github.io/</id>
  <author>
    <name><![CDATA[Kevin Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Importance of Computer Science to Software Engineers doing Web Development]]></title>
    <link href="http://Kevin-Wei.github.io/blog/2013/06/20/importance-of-asymptotic-analysis-to-web-development/"/>
    <updated>2013-06-20T15:14:00-07:00</updated>
    <id>http://Kevin-Wei.github.io/blog/2013/06/20/importance-of-asymptotic-analysis-to-web-development</id>
    <content type="html"><![CDATA[<p>Not everyone finds themselves diving into web development with a computer science background. So if it seems like a viable career path, the burning question must be:</p>

<blockquote><p>How does someone without a computer science degree land a job in web development?</p></blockquote>

<p>Well if you&rsquo;re a math savant, you can just go ahead and read <a href="http://www.amazon.com/books/dp/0262033844">this book</a> to start your path toward enlightenment. Also if you could answer this little <a href="https://en.wikipedia.org/wiki/P_versus_NP_problem">P = NP</a> problem while you&rsquo;re at it, it would be <a href="http://en.wikipedia.org/wiki/Millennium_Prize_Problems">much appreciated</a>.</p>

<p>As for the rest of us plebeians, we should be asking ourselves:</p>

<blockquote><p>&ldquo;Is computer science honestly <em>that</em> important for software engineering?&rdquo;</p></blockquote>

<p>While comprehensive knowledge might be an advantage during the interview process, a software engineering job may or may not even require the expertise acquired studying computer science in <strong>asymptotic analysis</strong> of <strong>data structures and algorithms</strong>.</p>

<p>I guess I have to give the horrible answer of <em>it depends</em>&hellip;</p>

<p>Some jobs are going to require this expertise. It may be essential to do the work. But that is something that&rsquo;s simply out of our control. However, there are plenty of jobs where this knowledge is being assessed as part of a thorough hiring practice. That&rsquo;s also exactly where we can take back control and take advantage of the situation.</p>

<p>Here is how we leverage both our knowledge and lack of knowledge to our advantage:</p>

<ul>
<li><p>This brings me to the first of the <em>two</em> important rules in life.</p>

<ol>
<li>Don&rsquo;t tell everyone everything you know.</li>
</ol>


<p>The reason for this is straight forward. If you tell someone during an interview that you have expertise in <strong>asymptotic analysis</strong> and understand <strong>data structures and algorithms</strong>, you&rsquo;re likely going get asked a question intended for someone who is well versed in the subject matter. Unless you plan on taking the time to master the material I would suggest being honest. Don&rsquo;t want to get caught pretending to know more than you do.</p></li>
<li><p>Despite this, a question may still be asked in regards to <strong>asymptotic analysis</strong>. Don&rsquo;t be afraid. They may be asking you anyway to assess how calm you stay under a stressful situation. The solution is simple. State clearly what you do and don&rsquo;t know and proceed to ask for help or describe how you would get help in such a situation where your knowledge is lacking. Show them your curious and willing to learn on the spot.</p></li>
<li><p>Another key thing to understand what <strong>asymptotic analysis</strong> describes. If you can clearly describe what the advantages and disadvantages are, this might even prove that you&rsquo;re a <em>good communicator</em>.</p>

<ul>
<li><p>Understand the basic problem is one of Time Complexity (how long it takes to run) vs Space Complexity (How much storage it takes) and the possible trade offs between the two. Understand that the tool for measurement is called &ldquo;Big O&rdquo; and is referred to as &ldquo;Big O notation&rdquo; and O(N) is pronounced &ldquo;O of N&rdquo;</p></li>
<li><p>Understand that Big O is simply referring to <em>the rate of growth for a resource based on the size of the input</em></p></li>
<li><p>Understand that <em>Asymptotic analysis</em> is not the end all for describing algorithmic efficiency. It doesn&rsquo;t take into account the frequency in which that algorithm or data structure will be used or how much better more powerful hardware will run things.</p></li>
<li><p>Most importantly someone smarter than you has likely already done the hard part. This stuff tends to be core to the structure of many systems and programming languages. The architects have likely taken this into heavy consideration so you don&rsquo;t have to.</p></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CRUDy REST]]></title>
    <link href="http://Kevin-Wei.github.io/blog/2013/06/02/crudy-rest/"/>
    <updated>2013-06-02T21:30:00-07:00</updated>
    <id>http://Kevin-Wei.github.io/blog/2013/06/02/crudy-rest</id>
    <content type="html"><![CDATA[<h3>CRUDy RESTful Rails Resources</h3>

<h4>Quickly CRUDy</h4>

<p>This is a peak into what I&rsquo;ve learned so far in my Ruby on Rails bootcamp at <a href="https://www.codefellows.org/">Codefellows</a>.</p>

<p>So let me give you a quick overview on CRUD (Create, Read, Update, Delete).</p>

<p>These are the four basic operations you can do to data in a database.</p>

<p>Yup that was it. That was my overview. I hope those 4 words make sense.</p>

<h4>Restful Rails Resources basics</h4>

<p>What does it have to do with the RESTful MVC on rails? MVC, in case you need a refresher, is just a simple paradigm for organizing the structure of an application. Model should interact with data, and View should format and display it. The Controller is all the logic for <strong>what</strong> data should get fetched to <strong>which</strong> view and <strong>how</strong> it is sent.
HTTP verbs correspond to the CRUD actions, and the MVC in Rails maps them to certain URLs (paths) using an &ldquo;action&rdquo;. That&rsquo;s all it takes to make something RESTful.</p>

<p>Unfortunately, if you ever actually used a website you probably had to fill out a form before information could be saved to the site. These &ldquo;staging areas&rdquo; are nessessary so you can state what you&rsquo;re changing your data to before the CRUD action saves data to the database. So with our slight update to CRUD we get what I call CRUDy RESTful Rails Resources.</p>

<table>
<thead>
<tr>
<th align="left">CRUD</th>
<th align="center">Http Verb</th>
<th align="left">Action</th>
<th align="left">Path</th>
<th align="left">Use case</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Pre-create </td>
<td align="center"> Get </td>
<td align="left"> new </td>
<td align="left"> /resources/new </td>
<td align="left"> staging area to make our new data object</td>
</tr>
<tr>
<td align="left">Create </td>
<td align="center"> Post </td>
<td align="left"> create </td>
<td align="left"> /resources </td>
<td align="left"> The actual making of it</td>
</tr>
<tr>
<td align="left">Read </td>
<td align="center"> Get </td>
<td align="left"> show </td>
<td align="left"> /resources/:id </td>
<td align="left"> Show the thing</td>
</tr>
<tr>
<td align="left">Read-all </td>
<td align="center"> Get </td>
<td align="left"> index </td>
<td align="left"> /resources/ </td>
<td align="left"> Show ALL THE THINGS</td>
</tr>
<tr>
<td align="left">Pre-update </td>
<td align="center"> Get </td>
<td align="left"> edit </td>
<td align="left"> /resources/:id/edit </td>
<td align="left"> staging for change our thing</td>
</tr>
<tr>
<td align="left">Update </td>
<td align="center"> Put </td>
<td align="left"> update </td>
<td align="left"> /resources/:id </td>
<td align="left"> The actual updating of the thing</td>
</tr>
<tr>
<td align="left">Delete </td>
<td align="center"> Delete </td>
<td align="left"> destroy </td>
<td align="left"> /resources/:id </td>
<td align="left"> Remove the thing</td>
</tr>
</tbody>
</table>


<p>So to make all this CRUD happen all you have to do is add a line to the routes.rb file in your Rails application:</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">things</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Some quick CRUDy RESTful tricks</h4>

<p>But say you don&rsquo;t want to show ALL THE THINGS because there is only one of said thing. You can avoid the index option like this:</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resource</span><span class="p">:</span> <span class="n">thing</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even nest a resource. This is useful when you have models with has_many and belongs_to relationships. For example, a product has many attributes, and an attribute belongs to a product.</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">product</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="n">attribute</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates paths that are similarly nested as expected:</p>

<table>
<thead>
<tr>
<th align="left">Action</th>
<th align="left">Path</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">new </td>
<td align="left">/products/:products_id/attributes/new</td>
</tr>
<tr>
<td align="left">create </td>
<td align="left"> /products/:products_id/attributes</td>
</tr>
<tr>
<td align="left">show </td>
<td align="left"> /products/:products_id/attributes/:id</td>
</tr>
<tr>
<td align="left">index </td>
<td align="left">/products/:product_id/attributes</td>
</tr>
<tr>
<td align="left">edit </td>
<td align="left"> /products/:products_id/attributes/:id/edit</td>
</tr>
<tr>
<td align="left">update </td>
<td align="left"> /products/:products_id/attributes/:id</td>
</tr>
<tr>
<td align="left">destroy </td>
<td align="left"> /products/:products_id/attributes/:id</td>
</tr>
</tbody>
</table>


<p>Great, but what if you don&rsquo;t want some of these things to be possible? It&rsquo;s easy to handpick using the rails :only and :except options. You can include / exclude whatever you want.</p>

<h4>Custom CRUDyness</h4>

<p>Only want the index?</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">things</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:index</span>
</span></code></pre></td></tr></table></div></figure>


<p>Want things to be unchangeable (immutable)?</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">things</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Think the default word choice is awful and don&rsquo;t fit with your application? Yeah I agree. You can rename them like so:</p>

<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="ss">resources</span><span class="p">:</span> <span class="n">zerg</span> <span class="ss">:path_names</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:new</span> <span class="o">=&gt;</span> <span class="s1">&#39;spawn&#39;</span><span class="p">,</span> <span class="ss">:edit</span> <span class="o">=&gt;</span> <span class="s1">&#39;evolve&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty basic stuff. Feel free to fall asleep reading more about it <a href="http://guides.rubyonrails.org/routing.html#overriding-the-named-helpers">here</a>.</p>

<p><a href="http://kevinthiswei.com/blog/2013/05/30/introduction/">So I lied in my Intro.</a> This post was probably boring and humorless. I&rsquo;m sorry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction: First Post Nonsense]]></title>
    <link href="http://Kevin-Wei.github.io/blog/2013/05/30/introduction/"/>
    <updated>2013-05-30T23:36:00-07:00</updated>
    <id>http://Kevin-Wei.github.io/blog/2013/05/30/introduction</id>
    <content type="html"><![CDATA[<h3>This Blog will soon be filled with:</h3>

<h4>Primarily:</h4>

<ul>
<li>Being a full stack Ruby on Rails Developer</li>
<li>Views on Tech News</li>
<li>Projects I am working on</li>
</ul>


<h4>Occasionally:</h4>

<ul>
<li>Beer thoughts</li>
<li>Esports thoughts</li>
<li>Fitness thoughts</li>
</ul>


<h4>and Mayhaps:</h4>

<ul>
<li>Being a terrible human, or what other people call an audiophile</li>
<li>Incomprehensible rants about things I can’t stand</li>
<li>Comprehensible rants about anything really</li>
</ul>


<p>Hopefully, future posts will be less humourless and boring.</p>
]]></content>
  </entry>
  
</feed>
